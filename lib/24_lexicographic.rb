
# 012 021 102 120 201 210
# 0123 0132 0213 0231 0312 0321
# 1023 1032 1203 1230 1302 1320
# 2013 2031 2103 2130 2301 2310
# 3012 3021 3102 3120 3201 3210
# 0987654321 = 9!th
# 1023456789 = 9! + 1th
# 1098765432 = 9! + 8!th
# 9876543210 = 10!
# 8976543210 = 10! - 9!th
# 1987654320 = 9! + 9!th
# 2013456789 = 9! + 9! + 1th
# 2098765431 = 9! + 9! + 8!th
# 2198765430 = 9! + 9! + 8! + 8!th
# 2698754310 = 2(9!) + 6(8!) = 967680
# 2701345689 = 2(9!) + 6(8!) + 1 = 967681
# 2709865431 = 2(9!) + 6(8!) + 7!
# 2769854310 = 2(9!) + 6(8!) + 6(7!)
# 1_000_000 = 2(9!) + 6(8!) + 6(7!) + 2(6!) + 5(5!) + 1(4!) + 2(3!) + 2(2!)
# 2780134569 = 2(9!) + 6(8!) + 6(7!) + 1
# 2780965431 = 2(9!) + 6(8!) + 6(7!) + 6!
# 2781965430 = 2(9!) + 6(8!) + 6(7!) + 2(6!)
# 2783014569 = 2(9!) + 6(8!) + 6(7!) + 2(6!) + 1
# 2783096541 = 2(9!) + 6(8!) + 6(7!) + 2(6!) + 5!
# 2783695410 = 2(9!) + 6(8!) + 6(7!) + 2(6!) + 5(5!)
# 2783901456 = 2(9!) + 6(8!) + 6(7!) + 2(6!) + 5(5!) + 1
# 2783906541 = 2(9!) + 6(8!) + 6(7!) + 2(6!) + 5(5!) + 4!
# 2783910654 = 2(9!) + 6(8!) + 6(7!) + 2(6!) + 5(5!) + 4! + 3!
# 2783914650 = 2(9!) + 6(8!) + 6(7!) + 2(6!) + 5(5!) + 4! + 2(3!)
# 2783915046 = 2(9!) + 6(8!) + 6(7!) + 2(6!) + 5(5!) + 4! + 2(3!) + 1
# 2783915460 = 2(9!) + 6(8!) + 6(7!) + 2(6!) + 5(5!) + 4! + 2(3!) + 2!

# nth lexicographic permutation of 10 digits
def lexicographic(n = 1_000_000)
    digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    res = []
    
    9.downto(1) do |i|
        fact = (1..i).reduce(:*)
        quotient = n / fact
        res.push(digits.delete_at(quotient))
        n = n - (quotient * fact)
    end
    res.join
end

if __FILE__ == $0
    t = Time.now
    puts lexicographic, Time.now - t
end
